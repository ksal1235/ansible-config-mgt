pipeline {
    agent any

    environment {
        ANSIBLE_CONFIG = "${WORKSPACE}/deploy/ansible.cfg"
    }

    stages {
        stage('Initial cleanup') {
            steps {
                dir("${WORKSPACE}") {
                    deleteDir()
                }
            }
        }

        stage('Checkout SCM') {
            steps {
                git branch: 'main', url: 'https://github.com/ksal1235/ansible-project.git'
            }
        }

        stage('Prepare Ansible For Execution') {
            steps {
                sh 'echo ${WORKSPACE}'
                sh 'sed -i "3 a roles_path=${WORKSPACE}/roles" ${WORKSPACE}/deploy/ansible.cfg'
            }
        }
        stage('Test SSH Connections') {
            steps {
                script {
                    def hosts = [
                        [group: 'tooling', ip: '172.31.5.211', user: 'ec2-user'],
                        [group: 'todo', ip: '172.31.10.184', user: 'ec2-user'],
                        [group: 'nginx', ip: '172.31.8.66', user: 'ubuntu'],
                        [group: 'db', ip: '172.31.7.100', user: 'ubuntu']
                    ]
                    
                    sshagent(['private-key']) {  // 'private-key' is the Jenkins Credential ID for your SSH key
                        for (host in hosts) {
                            sh "ssh -o StrictHostKeyChecking=no ${host.user}@${host.ip} exit"
                        }
                    }
                }
            }
        }
        stage('Run Ansible playbook') {
            steps {
                sshagent(['private-key']) {
                    ansiblePlaybook(
                        become: true,
                        credentialsId: 'private-key',
                        disableHostKeyChecking: true,
                        installation: 'ansible',
                        inventory: '${WORKSPACE}/inventory/dev.yml',
                        playbook: '${WORKSPACE}/playbooks/site.yml'
                    )
                }
            }
        }

        stage('Clean Workspace after build') {
            steps {
                cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenUnstable: true, deleteDirs: true)
            }
        }
    }
}
